import click

@click.command()
@click.argument('heat_file_path', type=click.Path(exists=True, dir_okay=True))
@click.argument('coeff_name', type=click.Path(exists=True, dir_okay=True))
@click.argument('param_name', type=click.Path(exists=True, dir_okay=True))
@click.argument('temp', type=click.FLOAT)
@click.argument('run_steps', type=click.INT)
@click.argument('heat_loop', type=click.INT)
@click.argument('heat_int', type=click.INT)
def HeatAnalysis(heat_file_path, coeff_name, param_name, temp, run_steps, heat_loop, heat_int):
    click.echo("Generating LAMMPS code input file")
    in_file_path = heat_file_path + "/input/in.heat.HEA"
    lmp_file_path = heat_file_path + "/output/after_relax.data"
# Redirect commands to a file
    with open(in_file_path, 'w') as f:
        f.write("# LAMMPS input script generated by PyLammps\n")
        f.write("# Initialise simulation\n")
        f.write("atom_style     atomic\n")
        f.write("units          metal\n")
        f.write(f"read_data     {lmp_file_path}\n")

        f.write("# 5 elements of HEA: Ni Co Ti Zr Hf specorder\n")
        f.write("mass           1 58.693\n")
        f.write("mass           2 58.933\n")
        f.write("mass           3 47.867\n")
        f.write("mass           4 91.224\n")
        f.write("mass           5 178.49\n")

        f.write("# Reading snap potential files\n")
        f.write("pair_style     snap\n")
        f.write(f"pair_coeff     * * {coeff_name} {param_name} Ni Co Ti Zr Hf\n") # parameterise
        
        f.write("# Setup standard output\n")
        f.write("variable       avg_lxyz equal (lx+ly+lz)/3.0\n")
        f.write("thermo_style   custom step temp pe pxx pyy pzz density\n")
        f.write("thermo         100\n")

        f.write("# Set up and run MD in NPT ensemble\n")
        f.write("timestep       0.001\n")
        f.write("neighbor       1.0 bin\n")
        f.write("neigh_modify   every 5 delay 0 check yes\n")
        f.write("reset_timestep 0\n")

        f.write(f"dump		    1 all custom 1000 {heat_file_path}/output/md_npt_dump.cfg id type x y z\n")
        f.write(f"fix		    1 all npt temp {temp} {temp} 0.1 aniso 0 0 1.0\n")
        Nevery = run_steps//100
        Nrepeat = run_steps//10
        f.write(f"fix		    avg all ave/time {Nevery} {Nrepeat} {run_steps} c_thermo_temp v_avg_lxyz\n")
        f.write(f"run		    {run_steps}\n")
        f.write("unfix		    1\n")
        f.write("variable       avg_T equal f_avg[1]\n")
        f.write("variable       L equal f_avg[2]\n")
        f.write("variable       L0 equal ${L}\n")
        f.write(f"print          \"Temp Strain\" file {heat_file_path}/output/Record_thermal_exp.txt\n")
        f.write(f"print          \"${{avg_T}}    0.0\" append {heat_file_path}/output/Record_thermal_exp.txt\n")
        f.write("unfix          avg\n")

        f.write(f"variable	    n loop {heat_loop}\n")
        f.write("label          heat\n")
        f.write(f"variable       t equal {temp}+${{n}}*{heat_int}\n") # parameterise
        f.write("fix            1 all npt temp ${t} ${t} 0.1 aniso 0 0 1.0\n")
        f.write(f"fix		    avg all ave/time {Nevery} {Nrepeat} {run_steps} c_thermo_temp v_avg_lxyz\n")
        f.write(f"run		    {run_steps}\n") # parameterise
        f.write("unfix		    1\n")
        f.write("variable       avg_T equal f_avg[1]\n")
        f.write("variable       strain equal f_avg[2]/${L0}-1.0\n")
        f.write(f"print          \"${{avg_T}}    ${{strain}}\" append {heat_file_path}/output/Record_thermal_exp.txt\n")
        f.write("unfix          avg\n")

        f.write("next           n\n")
        f.write(f"jump          {in_file_path} heat")



# running function
if __name__ == '__main__':
    HeatAnalysis()
