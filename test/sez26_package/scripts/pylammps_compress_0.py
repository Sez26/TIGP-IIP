import click

@click.command()
@click.argument('compress_file_path', type=click.Path(exists=True, dir_okay=True))
@click.argument('coeff_name', type=click.Path(exists=True, dir_okay=True))
@click.argument('param_name', type=click.Path(exists=True, dir_okay=True))
@click.argument('temp', type=click.FLOAT)
@click.argument('run_steps', type=click.INT)
@click.argument('compress_loop', type=click.INT)
def CompressAnalysis(compress_file_path, coeff_name, param_name, temp, run_steps, compress_loop):
    click.echo("Generating LAMMPS code input file")
    in_file_path = compress_file_path + "/input/in.compress.HEA"
    lmp_file_path = compress_file_path + "/input/HEA_II.lmp"
# Redirect commands to a file
    with open(in_file_path, 'w') as f:
        f.write("# LAMMPS input script generated by PyLammps\n")
        f.write("# Initialise simulation\n")
        f.write("atom_style     atomic\n")
        f.write("units          metal\n")
        f.write(f"read_data     {lmp_file_path}\n")
        f.write("# 5 elements of HEA: Ni Co Ti Zr Hf specorder\n")
        f.write("mass           1 58.693\n")
        f.write("mass           2 58.933\n")
        f.write("mass           3 47.867\n")
        f.write("mass           4 91.224\n")
        f.write("mass           5 178.49\n")
        f.write("# Reading snap potential files\n")
        f.write("pair_style     snap\n")
        f.write(f"pair_coeff     * * {coeff_name} {param_name} Ni Co Ti Zr Hf\n")
        # f.write("variable       target_T equal 300\n")
        f.write("neighbor       1.0 bin\n")
        f.write("neigh_modify   every 5 delay 0 check yes\n")
        f.write("# Define some properties you are instrested in\n")
        f.write("variable       lenx equal lx\n")
        f.write("variable       leny equal ly\n")
        f.write("variable       lenz equal lz\n")
        f.write("variable       strxx equal pxx\n")
        f.write("variable       stryy equal pyy\n")
        f.write("variable       strzz equal pzz\n")
        f.write("# Set up and run MD in NPT ensemble\n")
        f.write("timestep       0.001\n")
        f.write("neighbor       1.0 bin\n")
        f.write("neigh_modify   every 5 delay 0 check yes\n")
        f.write("# Setup standard output\n")
        f.write("thermo_style   custom step temp pe pxx pyy pzz lx ly lz\n")
        f.write("thermo         1000\n")
        f.write("reset_timestep 0\n")
        f.write(f"velocity       all create {temp} 12345678 dist gaussian rot yes mom yes\n")
        f.write(f"dump          1 all custom 1000 {compress_file_path}output/md_npt_dump_compress.cfg id type x y z\n")
        f.write(f"fix           1 all npt temp {temp} {temp} 0.1 aniso 0 0 1.0\n")
        Nevery = run_steps//100
        Nrepeat = 10
        f.write(f"fix           avg all ave/time {Nevery} {Nrepeat} {run_steps} v_lenx v_leny v_lenz\n")
        f.write(f"run           {run_steps}\n")
        f.write("undump         1\n")
        f.write("unfix          1\n")
        f.write("variable       newlx equal f_avg[1]\n")
        f.write("variable       newly equal f_avg[2]\n")
        f.write("variable       newlz equal f_avg[3]\n")
        f.write("change_box     all x final 0 ${newlx} y final 0 ${newly} z final 0 ${newlz} remap units box\n")
        f.write("unfix          avg\n")
        f.write(f"write_data     {compress_file_path}output/after_relax_compress.data nocoeff\n")
        f.write("# Compression Analysis\n")
        f.write("variable       init_lx equal $(lx)\n")
        f.write("variable       del_x equal ${init_lx}*(-0.001)\n")
        f.write(f"variable       comp_loop loop {compress_loop}\n")
        f.write("reset_timestep 0\n")
        f.write(f"print          \"strain stressx stressy stressz \" file {compress_file_path}output/SS_curve.txt\n")
        f.write(f"dump           1 all custom 1000 {compress_file_path}output/compress_dump.cfg id type x y z\n")
        f.write("label          compress\n")
        f.write("if             \"${comp_loop} > 1\" then &\n")
        f.write("               \"change_box all x delta 0 ${del_x} remap units box\n")
        f.write("variable       strain equal 1-$(lx)/${init_lx}\n")
        f.write("thermo_style   custom step temp pe pxx pyy pzz lx ly lz v_strain\n")
        f.write(f"fix            1 all npt temp {temp} {temp} 0.1 y 0.0 0.0 1.0 z 0.0 0.0 1.0\n")
        f.write(f"fix            2 all ave/time {Nevery} {Nrepeat} {run_steps} v_strxx v_stryy v_strzz")
        f.write(f"run           {run_steps}\n")
        f.write("unfix          1\n")
        f.write("variable       ave_stressx equal f_2[1]*1E-4\n")
        f.write("variable       ave_stressy equal f_2[2]*1E-4\n")
        f.write("variable       ave_stressz equal f_2[3]*1E-4\n")
        f.write("print          \"${strain} ${ave_stressx} ${ave_stressy} ${ave_stressz} \" append SS_curve.txt\n")
        f.write("unfix          2\n")
        f.write(f"write_data     {compress_file_path}output/after_md_${{comp_loop}}.data nocoeff\n")
        f.write("next           comp_loop\n")
        f.write(f"jump          {in_file_path} compress\n")
        f.write("undump         1\n")
        click.echo("LAMMPS input file generated")




# running function
if __name__ == '__main__':
    CompressAnalysis()
